name: Azure Pipelines
variables:
  python.version: '3.7.6'

###################### Start Provisioning ############################

stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadSecureFile@1
      name: tfvardef
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars'

    # Needed for Terraform VMghg deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCgFnJiEACZM2FWubsfJivwA2Kr9dAt95caDSjx3fo4p3IYYJItL3U+fl3tgbmYi4am2RrsihSAEAOLvWJaEkivDmwee5/wt0wmw2MqrqsNGy+WSWxsMMy5d4P/BsDdQfbizt7GGIMcODIXYheqoj8Eye3AsLbN47GZv188A+h+5CCsz5NeTTQppRKUtLY+Jwj8+1MXM60MSydyD9keMs3N4v9Sh+rqTfhaeMSBzNAmDIv7sMFR/WsYTglBPgBbrVV+PztfTiV62a7pE1YErrQ2opxrUhS1wK1fsDherxGkDiNCY9YmaI9TXjjBXRIIJlbUAwF0JMotgsTm/wy6JlLRIp9Gb6hH0vKtNo87WOD2wlOH4MuTGeVMs5z64VSO30oSZA38xCd+RqA474+leXtUML4jBZzSa45E/GbP4W1CAnOwKi76wJdK+anKadvzuCqHT1C3594GKKrcwGiI6ZcVXRCrNM8qkCVj9Br+BzwA3jEZ2xWoqGH2ewi+OQJhEMlDSp0pKKoi6X+1bCA+iPfiopHM8cV4I9KbgskisnJigvzYemcE+ETO24G9Y6cvWVjJ4sWVw8MtimiSmlZB8JUrm+Pg0FIgZ58gr5rnr+4YP/IAi5J5kvhd97Aat2L0I8KuDK+xRXHgSLLGjVAk2cRv9bBtGkYOGRfwQR9mhTkjJw== moussa@cc-7d3ff325-dc94f8d86-pmcxt'
        sshKeySecureFile: 'id_rsa'
    
    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test
      displayName: Copy terraform.tfvars 
      
    - bash: |
        echo Pipeline workspace dir is $(Pipeline.Workspace)
        echo Terraform variable definition file is $(tfvardef.secureFilePath)
        cd $(Agent.TempDirectory)
        pwd
        ls -la
        cat udacity_azure.pub
        cd ~/.ssh/
        pwd
        ls -la
        cat known_hosts
        # $(System.DefaultWorkingDirectory) is equivalent to $(Build.SourcesDirectory)
        cd $(System.DefaultWorkingDirectory)  
        pwd
        ls -la
      displayName: Verify build environment (pre)  
      
    # install Terraform Azure Pipelines Extension by Microsoft DevLabs
    # https://marketplace.visualstudio.com/items?itemName=ms-devlabs.custom-terraform-tasks


        ######################## Start Building #########################

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        verbose: true 

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'
  
    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        verbose: true
  
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

    ############### Starting Deployments #################################

- stage: Deployment
  jobs:
  - deployment: deployment_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: Download FakeRestAPI Artifact
            artifact: drop-fakerestapi

          - task: AzureWebApp@1
            displayName: Deploy Azure WebApp
            inputs:
              azureSubscription: 'azurerm-sc'
              appName: 'sunuapi'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip
              deploymentMethod: zipDeploy

- stage: Test
  jobs:
  - job: LoadTest
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'
    - task: CmdLine@2
      displayName: "Jmeter Load Test"
      inputs:
        script: |
          mkdir -p load_html_report
          jmeter -n -t Load.jmx -l load-results-report.csv -e -o load_html_report
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/'
    - task: CmdLine@2
      displayName: "Jmeter Endurance Test"
      inputs:
        script: |
          mkdir -p endurance_html_report
          jmeter -n -t Endurance.jmx -l endurance-results-report.csv -e -o endurance_html_report
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/endurance_html_report'
        ArtifactName: 'drop-endurance-report'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/load_html_report'
        ArtifactName: 'drop-load-report'
  - job: IntegrationTesting
    pool:
          name: Hosted Ubuntu 1604
    steps:
    - task: CmdLine@2
      displayName: Install Newman Runner
      inputs: 
        script: sudo npm install -g newman
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Newman Runner
      continueOnError: true
      inputs:
        script: newman run StarterAPIs.json -e final_project_postman_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport.xml 
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/*.xml'
        searchFolder: 
        testRunTitle: 'Integration Tests'

################################ Starting Testing ###########################################################
